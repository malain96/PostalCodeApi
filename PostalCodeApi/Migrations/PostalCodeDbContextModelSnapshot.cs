// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using PostalCodeApi.Persistence.Contexts;

namespace PostalCodeApi.Migrations
{
    [DbContext(typeof(PostalCodeDbContext))]
    internal class PostalCodeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PostalCodeApi.Domain.Models.City", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Cities");
            });

            modelBuilder.Entity("PostalCodeApi.Domain.Models.PostalCode", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Code")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("CountryIso")
                    .IsRequired()
                    .HasColumnType("nvarchar(2)")
                    .HasMaxLength(2);

                b.HasKey("Id");

                b.ToTable("PostalCodes");
            });

            modelBuilder.Entity("PostalCodeApi.Domain.Models.PostalCodeCity", b =>
            {
                b.Property<long>("PostalCodeId")
                    .HasColumnType("bigint");

                b.Property<long>("CityId")
                    .HasColumnType("bigint");

                b.HasKey("PostalCodeId", "CityId");

                b.HasIndex("CityId");

                b.ToTable("PostalCodeCities");
            });

            modelBuilder.Entity("PostalCodeApi.Domain.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy",
                        SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<byte[]>("PasswordHash")
                    .HasColumnType("varbinary(max)");

                b.Property<byte[]>("PasswordSalt")
                    .HasColumnType("varbinary(max)");

                b.Property<string>("Role")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Username")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        Id = 1,
                        PasswordHash = new byte[]
                        {
                            84, 111, 119, 165, 60, 73, 39, 167, 61, 73, 169, 214, 158, 3, 154, 114, 19, 179, 67, 23,
                            145, 3, 242, 170, 236, 199, 197, 183, 164, 202, 51, 216, 0, 103, 88, 118, 193, 4, 44, 226,
                            240, 88, 22, 146, 223, 47, 116, 0, 207, 90, 51, 48, 175, 158, 216, 172, 109, 100, 110, 157,
                            62, 237, 209, 47
                        },
                        PasswordSalt = new byte[]
                        {
                            21, 162, 19, 20, 238, 238, 126, 224, 73, 253, 189, 171, 178, 103, 99, 104, 83, 0, 253, 85,
                            37, 95, 84, 12, 9, 227, 84, 52, 64, 11, 252, 20, 39, 64, 61, 60, 166, 221, 244, 90, 23, 162,
                            199, 252, 55, 125, 239, 166, 110, 31, 105, 51, 204, 110, 107, 251, 175, 20, 32, 144, 235,
                            128, 56, 160, 173, 233, 210, 9, 181, 25, 220, 23, 95, 107, 78, 206, 180, 86, 244, 245, 240,
                            65, 19, 252, 181, 218, 90, 157, 51, 217, 254, 14, 157, 18, 165, 115, 113, 65, 1, 78, 76, 56,
                            251, 76, 47, 214, 143, 106, 141, 223, 35, 80, 3, 202, 66, 80, 42, 200, 237, 148, 243, 144,
                            0, 188, 77, 84, 247, 23
                        },
                        Role = "Admin",
                        Username = "admin"
                    },
                    new
                    {
                        Id = 2,
                        PasswordHash = new byte[]
                        {
                            84, 111, 119, 165, 60, 73, 39, 167, 61, 73, 169, 214, 158, 3, 154, 114, 19, 179, 67, 23,
                            145, 3, 242, 170, 236, 199, 197, 183, 164, 202, 51, 216, 0, 103, 88, 118, 193, 4, 44, 226,
                            240, 88, 22, 146, 223, 47, 116, 0, 207, 90, 51, 48, 175, 158, 216, 172, 109, 100, 110, 157,
                            62, 237, 209, 47
                        },
                        PasswordSalt = new byte[]
                        {
                            21, 162, 19, 20, 238, 238, 126, 224, 73, 253, 189, 171, 178, 103, 99, 104, 83, 0, 253, 85,
                            37, 95, 84, 12, 9, 227, 84, 52, 64, 11, 252, 20, 39, 64, 61, 60, 166, 221, 244, 90, 23, 162,
                            199, 252, 55, 125, 239, 166, 110, 31, 105, 51, 204, 110, 107, 251, 175, 20, 32, 144, 235,
                            128, 56, 160, 173, 233, 210, 9, 181, 25, 220, 23, 95, 107, 78, 206, 180, 86, 244, 245, 240,
                            65, 19, 252, 181, 218, 90, 157, 51, 217, 254, 14, 157, 18, 165, 115, 113, 65, 1, 78, 76, 56,
                            251, 76, 47, 214, 143, 106, 141, 223, 35, 80, 3, 202, 66, 80, 42, 200, 237, 148, 243, 144,
                            0, 188, 77, 84, 247, 23
                        },
                        Role = "User",
                        Username = "user"
                    });
            });

            modelBuilder.Entity("PostalCodeApi.Domain.Models.PostalCodeCity", b =>
            {
                b.HasOne("PostalCodeApi.Domain.Models.City", "City")
                    .WithMany("PostalCodeCities")
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("PostalCodeApi.Domain.Models.PostalCode", "PostalCode")
                    .WithMany("PostalCodeCities")
                    .HasForeignKey("PostalCodeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}